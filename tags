#!/usr/bin/env python3
import sys, os, glob, json 

# Local files
import terminal, test
import file_selector as fs

def getFilelist(mypath):
    from os import listdir
    from os.path import isfile, join
    return [f for f in listdir(mypath) if isfile(join(mypath, f))]

def saveTag(tagsTitle, tags):
    from pathlib import Path
    from os import path
    filepath = str(Path.home()) + "/.tagspaces.json"

    data = {
            'tags':{}
    }
    if(path.exists(filepath)):
        with open(filepath) as jsonfile:
            data = json.load(jsonfile)

    for title in tagsTitle:
        if(not title in data['tags']):
            data['tags'].update({title:tags[title]})

    with open(filepath, mode="w") as json_file:
        json.dump(data, json_file)

    print("tag saved to "+filepath)

class fileObj:
    def __init__(self, name, tags):
        super().__init__()
        self.name = name
        self.tags = tags

    name = "undefined"
    tags = []

    def show(self):
        print("\t * "+self.name+" : ",end="")
        for tag in self.tags:
            terminal.printTag(tag)
        # print(*[tag['title'] for tag in self.tags], sep="`, `",end="` ")
        print()

def listTags():
    global options

    path = os.getcwd()+"/.ts/"
    filelist = getFilelist(path)
    tags = {}

    print("\n# files with tags: \n")
    for filename in filelist:
        with open(path+filename, encoding='utf-8-sig') as jsonfile:

            data = json.load(jsonfile)

            if(not "appName" in data or data["appName"] != "TagSpaces"):
                continue

            curFileTags = []
            for item in data['tags']:

                title = item['title']
                color = item['color']
                if not title in tags:
                    tags[title] = item
                
                curFileTags.append(item)

            fileObj(name=title, tags = curFileTags ).show()

    print("\n# found tags in folder: \n")
    for title in tags:
        tag = tags[title]
        # print("\t* `"+tag+"`")
        terminal.printTag(tag)
    print()

    if("s" in options or "-save" in options):
        saveTag(tagsTitle=tags.keys(), tags=tags)

def listGlobalTags():
    from pathlib import Path
    from os import path

    filepath = str(Path.home()) + "/.tagspaces.json"

    data = {
            'tags':{}
    }
    if(path.exists(filepath)):
        with open(filepath) as jsonfile:
            data = json.load(jsonfile)
    
    print("\n# listing global found tags\n")
    for title in data['tags']:
        print("\t* `"+data['tags'][title]['title']+"`")
    print()

def printHelp():
    print("""
    # TagSpaces CLI

    A CLI version of TagSpaces that compatible with official one and works just fine.

    ## commands

    * list: (or `l` for attr) list tags
        * -s, --save : remember tags when detected
        * -g, --global : print remembered tags in system
    
    * add: (or `new` or `n` for attr) add new tag to file
        * --file [path], -f [path], --path [path], -p [path]: point a file to add
    """)

def newTag():
    global optionArgs

    filepath = (fs.selectFile() if (not '-file' in optionArgs and not 'f' in optionArgs nad not 'p' in optionArgs and not '-path' in optionArgs) else optionArgs[('-file' if '-file' in optionArgs else ('f' if 'f' in optionArgs else ('p' if 'p' in optionArgs else ('-path'))))])

    print("Create tag with file: "+str(filepath))

def editGlobalTags():
    print("Trying to edit global tags...")
    print("function unfinished!")

options = []
optionArgs = {}
func = ""

def main():

    global options, func, optionArgs
    '''for (index, arg) in enumerate(sys.argv):
        print(str(index) + ": " + arg)
        #print(os.getcwd())'''
    
    args = sys.argv
    del args[0]

    for command in args:
        if(command[0] != "-"):
            if(len(options) == 0):
                func = command
            else:
                optionArgs.update({options[-1:][0]:command})
                options = options[:-1]
        else:
            options.append(command[1:])

    # commands implements
    if(func == "list" or func == "l"):
        if("g" in options or "--global" in options):
            listGlobalTags()
        else:
            listTags()
        return

    if(func == "add" or func == "add" or func == "n"):
        newTag()
        return
    
    if(func == "config" or func == "c"):
        editGlobalTags()
        return

    if("-debug" in options):
        print("func:    " + func)
        print("options: " + str(options))
        print("args: "+ str(optionArgs))
        return
    
    if(func == "test"):
        test.run()
        return
    
    if(func == "" or len(options) or func == "help"):
        printHelp()
        return
    
    print("Command not found ,try `tags help` to print commands")

if __name__ == "__main__":
    main()
